angular.module("templates",[]).run(["$templateCache",function(e){e.put("src/templates/autocomplete-list.html","<div>\n    <style>\n        .searchresultspopup-wrapper {\n            margin-top: -19px;\n            position: absolute;\n            z-index: 9999;\n            width: 100%\n        }\n\n        .searchresultspopup {\n            border-radius: 0;\n            border: none;\n            -webkit-box-shadow: 0 8px 17px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n            -moz-box-shadow: 0 8px 17px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n            box-shadow: 0 8px 17px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n            z-index: 1000;\n            float: left;\n            min-width: 100%;\n            padding: 5px 0;\n            margin: 2px 0 0;\n            font-size: 14px;\n            text-align: left;\n            list-style: none;\n            background-color: #fff;\n            -webkit-background-clip: padding-box;\n            background-clip: padding-box;\n            border: 1px solid #ccc;\n            border: 1px solid rgba(0, 0, 0, .15);\n        }\n\n        .searchresultspopup span {\n            display: block;\n            padding: 3px 20px;\n            clear: both;\n            font-weight: normal;\n            line-height: 1.42857143;\n            color: #333;\n            white-space: nowrap;\n        }\n\n        .searchresultspopup li.selected {\n            color: #262626;\n            text-decoration: none;\n            background-color: #f5f5f5;\n        }\n    </style>\n    <div class=\"searchresultspopup-wrapper\">\n        <ul ng-show='visible'\n            ng-if=\"results.length\" class='searchresultspopup'>\n            <li ng-class=\"{ 'selected' : isSelected($index) }\"\n                ng-click='select($index,true)' ng-mousedown='select($index,true)' ng-repeat='result in results'>\n                <span>{{result.display}}</span>\n            </li>\n        </ul>\n        <md-progress-linear ng-if=\"loading\" md-mode=\"indeterminate\"></md-progress-linear>\n    </div>\n</div>\n"),e.put("src/templates/autocomplete-material.html",'<div>\n    <!-- Surrounding DIV for sfField builder to add a sfField directive to. -->\n    <div class="pull-left" ng-controller="autocompleterCtrl"\n         ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}">\n        <label>{{form.title}}</label>\n\n        <div style=\'position:relative\'>\n            <live-search \n            type="text" sf-field-model\n            live-search-callback="form.options.asyncCallback"\n            live-search-item-template="{{result.display}}" \n            live-search-select="display" \n            live-search-value="$$value$$" \n            live-search-select-callback="onBlur">\n            </live-search>\n        </div>\n         <div style="margin-top:-10px;"\n              class="help-block" ng-if="hasError()" sf-message="(form.description || \'Required\')"></div>\n        <!-- sf-field-model let\'s the ngModel builder know that you want a ng-model that matches against the form key here -->\n        <!-- schema-validate="form" validates the form against the schema -->\n        <span schema-validate="form"\n               ng-model="$$value$$" sf-field-model></span>\n        <!-- Description & Validation messages -->\n    </div>    \n</div>')}]),angular.module("LiveSearch",["ng"]).directive("liveSearch",["$compile","$timeout","$templateCache",function(e,l,n){return{restrict:"E",replace:!0,scope:{liveSearchCallback:"=",liveSearchSelect:"=?",liveSearchSelectCallback:"=",liveSearchItemTemplate:"@",liveSearchWaitTimeout:"=?",liveSearchMaxResultSize:"=?",liveSearchMaxlength:"=?",liveSearchValue:"="},template:"<input type='text' autocomplete='off'/>",link:function(t,a,r,i){var s;t.results=[],t.visible=!1,t.selectedIndex=-1,t.select=function(e,l){t.selectedFromList=l,t.selectedIndex=e,t.visible=!1},t.isSelected=function(e){return t.selectedIndex===e},t.results=[t.liveSearchValue],t.select(0),t.$watch("selectedIndex",function(e,l){var n=t.results[e];if(n)if(r.liveSearchSelectCallback){var i=t.liveSearchSelectCallback.call(null,{items:t.results,item:n});a.val(i)}else r.liveSearchSelect?a.val(n[r.liveSearchSelect]):a.val(n);n&&"undefined"!==a.controller("ngModel")&&(t.liveSearchValue=n)}),a[0].onblur=function(){if(t.abort=!0,t.manualyAborted=!0,l.cancel(s),!t.selectedFromList){t.visible=!1,t.loading=!1;var e={value:a.val(),display:a.val()};t.results=[e],t.liveSearchSelectCallback.call(null,{items:t.results,item:e}),t.liveSearchValue=e}},a[0].onkeydown=function(e){(e.ctrlKey||e.metaKey)&&e.preventDefault(),t.visible&&(40==e.keyCode?t.selectedIndex+1===t.results.length?t.selectedIndex=0:t.selectedIndex++:38==e.keyCode&&(0===t.selectedIndex?t.selectedIndex=t.results.length-1:t.selectedIndex==-1?t.selectedIndex=0:t.selectedIndex--),13==e.keyCode&&(t.visible=!1,t.selectedFromList=!0),t.$apply())};var o=function(e){if(13==e.keyCode&&a[0].onblur(),13==e.keyCode||37==e.keyCode||38==e.keyCode||39==e.keyCode||40==e.keyCode)return!1;var n=angular.element(e.target);l.cancel(s);var r=n.val().split(","),i=r[r.length-1].trim();return i.length<1||null!==t.liveSearchMaxlength&&i.length>t.liveSearchMaxlength?(t.visible=!1,void t.$apply()):void(s=l(function(){var e=[],l=t.liveSearchCallback.call(null,t.$parent.form,i);t.loading=!0,t.abort=!1,t.visible=!1,t.manualyAborted=!1,l.then(function(l){t.abort=!1,l&&(e=l.slice(0,(t.liveSearchMaxResultSize||20)-1))}),l["catch"](function(){t.abort=!0}),l["finally"](function(){if(!t.abort&&!t.manualyAborted)return t.visible=!0,t.loading=!1,t.selectedIndex=-1,void(t.results=e.filter(function(l,n){return e.indexOf(l)==n}))})},t.liveSearchWaitTimeout||100))};a[0].onkeyup=o,t.clear=function(){a.val(null),a[0].onblur()};var c=n.get("src/templates/autocomplete-list.html"),d=e(c)(t);angular.element(a.parent())[0].appendChild(d[0])}}}]),angular.module("autocompleteMaterial",["schemaForm","LiveSearch","templates"]).config(function(e,l){e.defineAddOn("bootstrapDecorator","autocomplete-material","src/templates/autocomplete-material.html",l.stdBuilders)}).controller("autocompleterCtrl",function(e){e.$on("refreshAutocompleter",function(l,n){_.isEqual(e.$parent.form.key,n)&&e.$$childHead.clear()}),e.onBlur=function(l){return e.$$childHead.ngModel=l.item,e.$parent.form.onSelect&&e.$parent.form.onSelect(e),l.item.display}});